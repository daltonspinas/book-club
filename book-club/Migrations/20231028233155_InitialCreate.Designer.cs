// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using book_club.Database.Context;

#nullable disable

namespace book_club.Migrations
{
    [DbContext(typeof(BookClubContext))]
    [Migration("20231028233155_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("book_club.Database.Entity.BookClub", b =>
                {
                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("ClubID");

                    b.Property<string>("ClubName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int")
                        .HasColumnName("OwnerID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("ClubId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "OwnerId" }, "IX_BookClub")
                        .IsUnique();

                    b.ToTable("BookClub", (string)null);

                    b.HasData(
                        new
                        {
                            ClubId = 1,
                            ClubName = "Demo Book Club",
                            OwnerId = 1
                        });
                });

            modelBuilder.Entity("book_club.Database.Entity.BookClubMember", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("ClubID");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("ClubId");

                    b.HasIndex("UserId");

                    b.ToTable("BookClubMembers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClubId = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClubId = 1,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            ClubId = 1,
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            ClubId = 1,
                            UserId = 4
                        });
                });

            modelBuilder.Entity("book_club.Database.Entity.ClubMeeting", b =>
                {
                    b.Property<int>("MeetingId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingID");

                    b.Property<string>("BookId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("BookID");

                    b.Property<int>("ClubId")
                        .HasColumnType("int")
                        .HasColumnName("ClubID");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("date");

                    b.Property<int?>("HostId")
                        .HasColumnType("int")
                        .HasColumnName("HostID");

                    b.Property<string>("Location")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("MeetingId");

                    b.HasIndex("ClubId");

                    b.HasIndex("HostId");

                    b.ToTable("ClubMeeting", (string)null);

                    b.HasData(
                        new
                        {
                            MeetingId = 1,
                            ClubId = 1,
                            Date = new DateTime(2023, 11, 2, 16, 31, 55, 203, DateTimeKind.Local).AddTicks(2277),
                            HostId = 3,
                            Location = "1234 Address, City, State, Zip"
                        });
                });

            modelBuilder.Entity("book_club.Database.Entity.Rsvp", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.Property<int>("MeetingId")
                        .HasColumnType("int")
                        .HasColumnName("MeetingID");

                    b.Property<bool?>("Rsvpstatus")
                        .HasColumnType("bit")
                        .HasColumnName("RSVPStatus");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id");

                    b.HasIndex("MeetingId");

                    b.HasIndex("UserId");

                    b.ToTable("RSVP", (string)null);
                });

            modelBuilder.Entity("book_club.Database.Entity.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("User", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Email = "test@gmail.com",
                            Password = "password",
                            Username = "Demo Owner 1"
                        },
                        new
                        {
                            UserId = 2,
                            Email = "test@gmail.com",
                            Password = "password",
                            Username = "Demo Member 1"
                        },
                        new
                        {
                            UserId = 3,
                            Email = "test@gmail.com",
                            Password = "password",
                            Username = "Demo Member 2"
                        },
                        new
                        {
                            UserId = 4,
                            Email = "test@gmail.com",
                            Password = "password",
                            Username = "Demo Member 3"
                        });
                });

            modelBuilder.Entity("book_club.Database.Entity.BookClub", b =>
                {
                    b.HasOne("book_club.Database.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("book_club.Database.Entity.BookClubMember", b =>
                {
                    b.HasOne("book_club.Database.Entity.BookClub", "Club")
                        .WithMany("BookClubMembers")
                        .HasForeignKey("ClubId")
                        .IsRequired()
                        .HasConstraintName("FK_BookClubMembers_BookClub");

                    b.HasOne("book_club.Database.Entity.User", "User")
                        .WithMany("BookClubMembers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_BookClubMembers_User");

                    b.Navigation("Club");

                    b.Navigation("User");
                });

            modelBuilder.Entity("book_club.Database.Entity.ClubMeeting", b =>
                {
                    b.HasOne("book_club.Database.Entity.BookClub", "Club")
                        .WithMany("ClubMeetings")
                        .HasForeignKey("ClubId")
                        .IsRequired()
                        .HasConstraintName("FK_ClubMeeting_BookClub");

                    b.HasOne("book_club.Database.Entity.User", "Host")
                        .WithMany("ClubMeetings")
                        .HasForeignKey("HostId")
                        .HasConstraintName("FK_ClubMeeting_User");

                    b.Navigation("Club");

                    b.Navigation("Host");
                });

            modelBuilder.Entity("book_club.Database.Entity.Rsvp", b =>
                {
                    b.HasOne("book_club.Database.Entity.ClubMeeting", "Meeting")
                        .WithMany("Rsvps")
                        .HasForeignKey("MeetingId")
                        .IsRequired()
                        .HasConstraintName("FK_RSVP_ClubMeeting");

                    b.HasOne("book_club.Database.Entity.User", "User")
                        .WithMany("Rsvps")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_RSVP_User");

                    b.Navigation("Meeting");

                    b.Navigation("User");
                });

            modelBuilder.Entity("book_club.Database.Entity.BookClub", b =>
                {
                    b.Navigation("BookClubMembers");

                    b.Navigation("ClubMeetings");
                });

            modelBuilder.Entity("book_club.Database.Entity.ClubMeeting", b =>
                {
                    b.Navigation("Rsvps");
                });

            modelBuilder.Entity("book_club.Database.Entity.User", b =>
                {
                    b.Navigation("BookClubMembers");

                    b.Navigation("ClubMeetings");

                    b.Navigation("Rsvps");
                });
#pragma warning restore 612, 618
        }
    }
}
